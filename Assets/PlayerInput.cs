//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CameraController"",
            ""id"": ""3786d287-c65b-406c-90f0-e69106432f88"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""345801bb-c6ee-4b92-a81c-4dc88cd97693"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1fa0052d-ace6-4ad5-977e-4257bfd117d0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ab680e25-ab9c-4336-972c-ec5cbe8bbe8c"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""444c393d-34ad-4359-be21-69d7ecd78095"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""446de751-7a81-494b-a0c1-567961a8a482"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9d3003a-db07-46ef-b73f-b2b3f175b3ba"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement"",
            ""id"": ""07f7a003-63dd-424a-a5c4-7f11bec3d029"",
            ""actions"": [
                {
                    ""name"": ""WalkR/L"",
                    ""type"": ""Button"",
                    ""id"": ""87bdd0f6-9184-46c3-bd78-f6ca057794bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WalkU/D"",
                    ""type"": ""Button"",
                    ""id"": ""857ddb92-d017-48ae-916f-a2580ac6e183"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""R/L"",
                    ""id"": ""c1d6eafc-3e6c-4d8f-82f8-28b35a957dd7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkR/L"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c367b9ff-0496-455a-9668-af00c7c1cd2b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkR/L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c0dedffc-daa4-44d8-868b-474ad1183064"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkR/L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""R/Lpad"",
                    ""id"": ""014287d0-390b-4632-8231-7c36acf0e04d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkR/L"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ea4de696-a73e-4e8f-8ea7-960cd90e1cfe"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkR/L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""baefe63e-e3f2-4eef-aa5a-a9ef22db8c85"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkR/L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""U/D"",
                    ""id"": ""5fce1df8-31d8-4ba0-9a64-bd7de11ec5f7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkU/D"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""af5ebb7b-c979-40ed-9b84-1d8dbc12d20a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkU/D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""50b9544e-5c3f-4279-8cb6-5b0769935125"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkU/D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""U/Dpad"",
                    ""id"": ""1475b5c6-a30a-4509-b0b8-f80dc0814614"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkU/D"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""70984950-12fd-46a7-b986-b11ddd4b5bb3"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkU/D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0aa1b2f6-0ed0-464f-8383-2d2a41f8864b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkU/D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""883d2c16-7032-4578-a96e-e9793c58735a"",
            ""actions"": [
                {
                    ""name"": ""Active/Desactiv"",
                    ""type"": ""Button"",
                    ""id"": ""37128d06-1533-402d-99cb-eb1b4b0106cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""982baed5-dddc-4f0b-bc2e-0d9d7c99e5ad"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active/Desactiv"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Message"",
            ""id"": ""ffcc7c9e-6d88-45d5-a541-7e46e4a0d8b2"",
            ""actions"": [
                {
                    ""name"": ""Active"",
                    ""type"": ""Button"",
                    ""id"": ""c67cfc67-4f93-414e-a0c8-42f3daeb8f14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Send"",
                    ""type"": ""Button"",
                    ""id"": ""10a7c93a-e23d-425b-af50-9df476dbcd9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03cfe94c-8358-4998-81dd-6c37ed037003"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6334a9fe-272a-4059-aa40-da827ecb2f89"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Send"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraController
        m_CameraController = asset.FindActionMap("CameraController", throwIfNotFound: true);
        m_CameraController_MouseX = m_CameraController.FindAction("MouseX", throwIfNotFound: true);
        m_CameraController_MouseY = m_CameraController.FindAction("MouseY", throwIfNotFound: true);
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_WalkRL = m_Movement.FindAction("WalkR/L", throwIfNotFound: true);
        m_Movement_WalkUD = m_Movement.FindAction("WalkU/D", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_ActiveDesactiv = m_Inventory.FindAction("Active/Desactiv", throwIfNotFound: true);
        // Message
        m_Message = asset.FindActionMap("Message", throwIfNotFound: true);
        m_Message_Active = m_Message.FindAction("Active", throwIfNotFound: true);
        m_Message_Send = m_Message.FindAction("Send", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraController
    private readonly InputActionMap m_CameraController;
    private List<ICameraControllerActions> m_CameraControllerActionsCallbackInterfaces = new List<ICameraControllerActions>();
    private readonly InputAction m_CameraController_MouseX;
    private readonly InputAction m_CameraController_MouseY;
    public struct CameraControllerActions
    {
        private @PlayerInput m_Wrapper;
        public CameraControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseX => m_Wrapper.m_CameraController_MouseX;
        public InputAction @MouseY => m_Wrapper.m_CameraController_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_CameraController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControllerActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Add(instance);
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
        }

        private void UnregisterCallbacks(ICameraControllerActions instance)
        {
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
        }

        public void RemoveCallbacks(ICameraControllerActions instance)
        {
            if (m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControllerActions @CameraController => new CameraControllerActions(this);

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_WalkRL;
    private readonly InputAction m_Movement_WalkUD;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @WalkRL => m_Wrapper.m_Movement_WalkRL;
        public InputAction @WalkUD => m_Wrapper.m_Movement_WalkUD;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @WalkRL.started += instance.OnWalkRL;
            @WalkRL.performed += instance.OnWalkRL;
            @WalkRL.canceled += instance.OnWalkRL;
            @WalkUD.started += instance.OnWalkUD;
            @WalkUD.performed += instance.OnWalkUD;
            @WalkUD.canceled += instance.OnWalkUD;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @WalkRL.started -= instance.OnWalkRL;
            @WalkRL.performed -= instance.OnWalkRL;
            @WalkRL.canceled -= instance.OnWalkRL;
            @WalkUD.started -= instance.OnWalkUD;
            @WalkUD.performed -= instance.OnWalkUD;
            @WalkUD.canceled -= instance.OnWalkUD;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_ActiveDesactiv;
    public struct InventoryActions
    {
        private @PlayerInput m_Wrapper;
        public InventoryActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActiveDesactiv => m_Wrapper.m_Inventory_ActiveDesactiv;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @ActiveDesactiv.started += instance.OnActiveDesactiv;
            @ActiveDesactiv.performed += instance.OnActiveDesactiv;
            @ActiveDesactiv.canceled += instance.OnActiveDesactiv;
        }

        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @ActiveDesactiv.started -= instance.OnActiveDesactiv;
            @ActiveDesactiv.performed -= instance.OnActiveDesactiv;
            @ActiveDesactiv.canceled -= instance.OnActiveDesactiv;
        }

        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // Message
    private readonly InputActionMap m_Message;
    private List<IMessageActions> m_MessageActionsCallbackInterfaces = new List<IMessageActions>();
    private readonly InputAction m_Message_Active;
    private readonly InputAction m_Message_Send;
    public struct MessageActions
    {
        private @PlayerInput m_Wrapper;
        public MessageActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Active => m_Wrapper.m_Message_Active;
        public InputAction @Send => m_Wrapper.m_Message_Send;
        public InputActionMap Get() { return m_Wrapper.m_Message; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MessageActions set) { return set.Get(); }
        public void AddCallbacks(IMessageActions instance)
        {
            if (instance == null || m_Wrapper.m_MessageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MessageActionsCallbackInterfaces.Add(instance);
            @Active.started += instance.OnActive;
            @Active.performed += instance.OnActive;
            @Active.canceled += instance.OnActive;
            @Send.started += instance.OnSend;
            @Send.performed += instance.OnSend;
            @Send.canceled += instance.OnSend;
        }

        private void UnregisterCallbacks(IMessageActions instance)
        {
            @Active.started -= instance.OnActive;
            @Active.performed -= instance.OnActive;
            @Active.canceled -= instance.OnActive;
            @Send.started -= instance.OnSend;
            @Send.performed -= instance.OnSend;
            @Send.canceled -= instance.OnSend;
        }

        public void RemoveCallbacks(IMessageActions instance)
        {
            if (m_Wrapper.m_MessageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMessageActions instance)
        {
            foreach (var item in m_Wrapper.m_MessageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MessageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MessageActions @Message => new MessageActions(this);
    public interface ICameraControllerActions
    {
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
    public interface IMovementActions
    {
        void OnWalkRL(InputAction.CallbackContext context);
        void OnWalkUD(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnActiveDesactiv(InputAction.CallbackContext context);
    }
    public interface IMessageActions
    {
        void OnActive(InputAction.CallbackContext context);
        void OnSend(InputAction.CallbackContext context);
    }
}
